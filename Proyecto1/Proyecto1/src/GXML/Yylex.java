/* The following code was generated by JFlex 1.7.0 */

package GXML;

import java.lang.System;
import java_cup.runtime.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lex.jlex</tt>
 */
public class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int COMENTARIODOUBLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\51\1\55\1\55\1\54\22\0\1\52\1\0\1\45"+
    "\1\33\1\53\3\0\1\43\1\44\1\42\1\41\1\40\1\37\1\0"+
    "\1\15\1\3\1\2\1\2\1\2\1\2\1\2\1\2\1\2\1\2"+
    "\1\2\2\0\1\14\1\50\1\16\2\0\1\13\1\32\1\22\1\23"+
    "\1\20\1\30\1\36\1\35\1\5\2\1\1\25\1\6\1\21\1\10"+
    "\1\7\1\1\1\11\1\27\1\12\1\31\1\17\1\1\1\24\1\34"+
    "\7\1\1\13\1\32\1\22\1\23\1\20\1\30\1\36\1\35\1\5"+
    "\2\1\1\25\1\6\1\21\1\10\1\7\1\1\1\11\1\27\1\12"+
    "\1\31\1\17\1\1\1\24\1\34\1\1\1\46\1\0\1\47\7\0"+
    "\1\55\252\0\2\4\115\0\1\26\u1ea8\0\1\55\1\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\6\2\1\4\1\5"+
    "\5\2\1\6\1\2\1\1\3\2\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\2\24\1\25\2\24\1\0\1\26\1\2"+
    "\1\26\1\0\6\2\1\0\7\2\2\0\12\2\1\0"+
    "\1\2\1\0\4\2\1\7\1\27\1\30\1\31\2\0"+
    "\2\2\1\0\3\2\1\0\1\2\1\0\3\2\1\0"+
    "\1\2\1\32\5\2\12\0\13\2\1\0\2\2\1\0"+
    "\1\2\1\0\5\2\2\0\2\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\1\33\1\2\2\34"+
    "\2\2\1\0\1\2\1\35\1\2\13\0\3\2\1\0"+
    "\6\2\1\0\1\2\1\36\1\0\2\2\1\0\1\2"+
    "\1\0\1\2\1\0\4\2\2\0\2\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\0\2\2"+
    "\1\37\1\40\1\0\1\2\13\0\2\41\2\2\1\0"+
    "\2\2\1\0\4\2\1\42\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\2\2\43\1\2\1\44\1\45"+
    "\1\0\1\46\1\2\1\46\2\47\2\50\1\0\1\2"+
    "\2\51\1\0\3\2\2\52\13\0\2\2\2\53\1\54"+
    "\1\0\1\2\1\0\3\2\1\0\1\2\1\0\2\2"+
    "\1\0\1\2\1\0\1\2\1\55\1\0\1\2\1\0"+
    "\1\2\1\0\3\2\2\0\2\2\10\0\1\56\3\0"+
    "\1\2\1\57\2\60\1\0\1\2\1\61\1\2\2\62"+
    "\1\0\1\2\1\63\1\0\1\2\1\0\1\2\2\64"+
    "\1\0\1\2\1\0\3\2\2\0\2\2\3\0\1\65"+
    "\6\0\1\66\1\2\2\67\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\2\70\1\0\1\2"+
    "\1\71\2\0\2\2\4\0\1\72\4\0\1\73\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\2\74\2\75"+
    "\2\0\2\2\3\0\1\76\1\77\1\0\1\100\1\0"+
    "\1\101\1\0\1\2\2\102\2\103\1\0\1\104\1\2"+
    "\1\104\1\0\1\105\3\0\2\106\1\0\1\2\4\0"+
    "\2\107\1\0\1\110\1\111\1\112\3\0\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\212\0\u0284"+
    "\0\u02b2\0\u02e0\0\u030e\0\u033c\0\270\0\u036a\0\u0398\0\u03c6"+
    "\0\u03f4\0\u0422\0\u0450\0\270\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\u047e"+
    "\0\212\0\212\0\u04ac\0\u04da\0\u0508\0\212\0\u0536\0\270"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986"+
    "\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6"+
    "\0\u0b24\0\u0b52\0\u0b80\0\212\0\212\0\212\0\u0bae\0\u0bdc"+
    "\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\270\0\u0e8e"+
    "\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e"+
    "\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254\0\u1282\0\u12b0\0\u12de"+
    "\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be"+
    "\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\270\0\u178a\0\212\0\270\0\u17b8\0\u17e6\0\u1814"+
    "\0\u1842\0\270\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\270\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78"+
    "\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8"+
    "\0\u1f16\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058"+
    "\0\u2086\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\270"+
    "\0\u21c8\0\u21f6\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a"+
    "\0\u2338\0\u2366\0\u2394\0\u23c2\0\u23f0\0\212\0\270\0\u241e"+
    "\0\u244c\0\u247a\0\u24a8\0\u24d6\0\u2504\0\u2532\0\u2560\0\u258e"+
    "\0\u25bc\0\270\0\u25ea\0\u2618\0\u2646\0\u2674\0\u26a2\0\u26d0"+
    "\0\u26fe\0\u272c\0\u275a\0\212\0\270\0\u2788\0\270\0\270"+
    "\0\u27b6\0\212\0\u27e4\0\270\0\212\0\270\0\212\0\270"+
    "\0\u2812\0\u2840\0\212\0\270\0\u286e\0\u289c\0\u28ca\0\u28f8"+
    "\0\u2926\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68"+
    "\0\u2a96\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\212"+
    "\0\270\0\270\0\u2bd8\0\u2c06\0\u2c34\0\u2c62\0\u2c90\0\u2cbe"+
    "\0\u2cec\0\u2d1a\0\u2d48\0\u2d76\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e"+
    "\0\u2e5c\0\270\0\u2e8a\0\u2eb8\0\u2ee6\0\u2f14\0\u2f42\0\u2f70"+
    "\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056\0\u3084\0\u30b2\0\u30e0"+
    "\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6\0\u31f4\0\212\0\u3222"+
    "\0\u3250\0\u327e\0\u32ac\0\270\0\212\0\270\0\u32da\0\u3308"+
    "\0\270\0\u3336\0\212\0\270\0\u3364\0\u3392\0\270\0\u33c0"+
    "\0\u33ee\0\u341c\0\u344a\0\212\0\270\0\u3478\0\u34a6\0\u34d4"+
    "\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616\0\u3644"+
    "\0\u3672\0\u36a0\0\212\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786"+
    "\0\u37b4\0\212\0\u37e2\0\212\0\270\0\u3810\0\u383e\0\u386c"+
    "\0\u389a\0\u38c8\0\u38f6\0\u3924\0\u3952\0\u3980\0\212\0\270"+
    "\0\u39ae\0\u39dc\0\270\0\u3a0a\0\u3a38\0\u3a66\0\u3a94\0\u3ac2"+
    "\0\u3af0\0\u3b1e\0\u3b4c\0\212\0\u3b7a\0\u3ba8\0\u3bd6\0\u3c04"+
    "\0\270\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46"+
    "\0\212\0\270\0\212\0\270\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe"+
    "\0\u3e2c\0\u3e5a\0\u3e88\0\212\0\212\0\u3eb6\0\212\0\u3ee4"+
    "\0\270\0\u3f12\0\u3f40\0\212\0\270\0\212\0\270\0\u3f6e"+
    "\0\212\0\u3f9c\0\270\0\u3fca\0\212\0\u3ff8\0\u4026\0\u4054"+
    "\0\212\0\270\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168"+
    "\0\212\0\270\0\u4196\0\212\0\212\0\212\0\u41c4\0\u41f2"+
    "\0\u4220\0\212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\5\1\13\1\14\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\5\1\32\1\33\1\34\2\5\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\4\1\50\1\0\51\51\1\52\46\51"+
    "\1\4\6\51\1\53\1\51\1\54\1\53\1\51\57\0"+
    "\1\5\3\0\7\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\21\0\2\6\60\0\1\55\14\0\1\56\33\0"+
    "\1\5\3\0\1\5\1\57\5\5\3\0\4\5\1\60"+
    "\2\5\1\0\4\5\1\0\3\5\20\0\1\5\2\0"+
    "\1\61\1\62\5\5\1\63\3\0\7\5\1\0\2\5"+
    "\1\64\1\5\1\0\3\5\20\0\1\5\3\0\4\5"+
    "\1\65\1\5\1\66\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\1\5\1\67"+
    "\5\5\1\0\4\5\1\0\3\5\20\0\1\5\2\0"+
    "\1\70\1\71\5\5\1\72\3\0\1\5\1\73\5\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\2\5\1\74\1\75\2\5\1\76\1\0\2\5"+
    "\1\77\1\5\1\0\3\5\34\0\1\100\41\0\1\5"+
    "\2\0\1\101\1\102\6\5\3\0\1\5\1\103\5\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\2\5\1\104\4\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\3\5\1\105\3\5\3\0\1\5"+
    "\1\106\5\5\1\0\2\5\1\107\1\5\1\0\3\5"+
    "\20\0\1\5\3\0\3\5\1\110\3\5\3\0\7\5"+
    "\1\0\2\5\1\111\1\5\1\0\3\5\20\0\1\5"+
    "\3\0\6\5\1\112\3\0\1\5\1\113\5\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\2\0\1\114\1\115"+
    "\6\5\3\0\7\5\1\0\4\5\1\0\3\5\37\0"+
    "\1\116\36\0\1\5\3\0\7\5\3\0\1\5\1\117"+
    "\5\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\6\5\1\120\3\0\7\5\1\0\2\5\1\121\1\5"+
    "\1\0\3\5\20\0\1\5\3\0\3\5\1\122\3\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\21\0\2\123"+
    "\7\0\1\123\4\0\1\123\1\0\2\123\4\0\1\123"+
    "\1\0\1\123\1\124\17\0\1\125\54\0\1\50\1\0"+
    "\1\50\52\0\1\53\2\0\1\53\34\0\1\126\31\0"+
    "\1\127\3\0\1\130\43\0\1\5\3\0\2\5\1\131"+
    "\3\5\1\132\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\40\0\1\133\35\0\1\5\3\0\7\5\3\0\2\5"+
    "\1\134\4\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\7\5\3\0\5\5\1\135\1\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\6\5"+
    "\1\136\1\137\1\140\3\5\1\0\3\5\20\0\1\5"+
    "\2\0\1\141\1\142\6\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\5\5\1\143\1\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\7\5\3\0\7\5\1\0\1\5\1\144\2\5"+
    "\1\0\3\5\26\0\1\145\47\0\1\5\3\0\2\5"+
    "\1\146\4\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\1\5\1\147\5\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\5\5\1\150\1\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\7\5\3\0\3\5\1\151\3\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\3\5\1\152\3\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\5\5\1\153\1\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\5\5"+
    "\1\154\1\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\23\0\2\155\1\156\3\0\1\157\4\0\1\160\1\161"+
    "\1\0\1\162\1\163\1\0\1\164\4\0\1\165\46\0"+
    "\1\166\33\0\1\5\3\0\7\5\3\0\4\5\1\167"+
    "\2\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\4\5\1\170\2\5\3\0\2\5\1\171\4\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\7\5\3\0"+
    "\1\172\6\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\1\5\1\173\5\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\7\5"+
    "\1\0\4\5\1\0\2\5\1\174\20\0\1\5\3\0"+
    "\1\5\1\175\5\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\2\5\1\176"+
    "\3\5\1\177\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\4\5\1\200\2\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\5\5\1\201\1\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\7\5\3\0\7\5\1\202\1\203\1\204\2\5"+
    "\1\0\3\5\45\0\2\205\27\0\1\5\3\0\7\5"+
    "\3\0\7\5\1\205\1\206\3\5\1\0\3\5\41\0"+
    "\1\207\34\0\1\5\3\0\7\5\3\0\3\5\1\210"+
    "\3\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\6\5\1\211\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\7\5\3\0\1\5\1\212\5\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\4\5"+
    "\1\213\1\214\1\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\21\0\2\123\7\0\1\123\4\0\1\123\1\0"+
    "\2\123\4\0\1\123\1\0\1\123\33\0\1\215\103\0"+
    "\1\216\20\0\1\5\3\0\3\5\1\217\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\0\4\5\1\0\2\5\1\220"+
    "\23\0\2\221\51\0\1\5\2\0\1\221\1\222\6\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\2\0\1\223\1\224\6\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\5\5\1\225\1\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\23\0\2\226"+
    "\51\0\1\5\2\0\1\226\1\227\6\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\40\0\1\230\35\0\1\5"+
    "\3\0\7\5\3\0\2\5\1\231\4\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\7\5"+
    "\1\0\4\5\1\0\1\5\1\232\1\5\20\0\1\5"+
    "\3\0\7\5\3\0\1\5\1\233\5\5\1\0\4\5"+
    "\1\0\3\5\27\0\1\234\46\0\1\5\3\0\3\5"+
    "\1\235\3\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\5\5\1\236\1\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\7\5\1\0\4\5\1\0\1\5\1\237\1\5"+
    "\20\0\1\5\2\0\1\240\1\241\6\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\3\5"+
    "\1\242\3\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\3\5\1\243\3\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\25\0\1\244\100\0\1\245"+
    "\44\0\1\246\55\0\1\247\56\0\1\250\44\0\1\251"+
    "\60\0\1\252\4\0\1\253\41\0\2\254\60\0\1\255"+
    "\65\0\1\256\36\0\1\5\3\0\7\5\3\0\1\5"+
    "\1\257\5\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\7\5\3\0\4\5\1\260\2\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\5\5\1\261\1\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\2\0\1\262\1\263\6\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\7\5"+
    "\1\0\3\5\1\264\1\0\3\5\20\0\1\5\3\0"+
    "\4\5\1\265\2\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\1\5\1\266"+
    "\5\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\5\5\1\267\1\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\3\5\1\270\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\271\1\272\3\5\1\0\3\5"+
    "\20\0\1\5\3\0\3\5\1\273\3\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\26\0\1\274\47\0\1\5"+
    "\3\0\2\5\1\275\4\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\1\5"+
    "\1\276\5\5\1\0\4\5\1\0\3\5\31\0\1\277"+
    "\44\0\1\5\3\0\5\5\1\300\1\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\50\0\1\301\25\0\1\5"+
    "\3\0\7\5\3\0\7\5\1\0\2\5\1\302\1\5"+
    "\1\0\3\5\20\0\1\5\3\0\7\5\3\0\7\5"+
    "\1\303\1\304\3\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\305\4\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\4\5\1\306"+
    "\2\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\3\5\1\307\3\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\30\0\1\310\64\0\1\311\36\0\1\5\3\0"+
    "\4\5\1\312\2\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\1\5\1\313"+
    "\5\5\1\0\4\5\1\0\3\5\25\0\1\314\50\0"+
    "\1\5\3\0\1\5\1\315\5\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\25\0\1\316\50\0\1\5\3\0"+
    "\1\5\1\317\5\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\2\0\1\320\1\321\6\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\41\0\1\322\34\0"+
    "\1\5\3\0\7\5\3\0\3\5\1\323\3\5\1\0"+
    "\4\5\1\0\3\5\41\0\1\324\34\0\1\5\3\0"+
    "\7\5\3\0\3\5\1\325\3\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\4\5\1\326\2\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\3\5\1\327\3\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\3\5\1\330\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\27\0\1\331\46\0"+
    "\1\5\3\0\3\5\1\332\3\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\7\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\1\333\25\0\1\334"+
    "\73\0\1\335\54\0\1\336\52\0\1\337\53\0\1\340"+
    "\57\0\1\341\46\0\1\342\73\0\1\343\53\0\2\344"+
    "\40\0\1\345\53\0\1\346\46\0\1\5\3\0\3\5"+
    "\1\347\3\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\6\5\1\350\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\6\5\1\351"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\32\0\1\352"+
    "\43\0\1\5\3\0\6\5\1\353\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\4\5\1\354"+
    "\2\5\3\0\7\5\1\0\4\5\1\0\3\5\20\0"+
    "\1\5\2\0\1\355\1\356\6\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\4\5\1\357"+
    "\2\5\3\0\7\5\1\0\4\5\1\0\3\5\20\0"+
    "\1\5\3\0\4\5\1\360\2\5\3\0\1\5\1\361"+
    "\5\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\4\5\1\362\2\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\23\0\2\363\51\0\1\5\2\0\1\363\1\364"+
    "\6\5\3\0\7\5\1\0\4\5\1\0\3\5\44\0"+
    "\1\365\31\0\1\5\3\0\7\5\3\0\6\5\1\366"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\3\5\1\367\3\5\1\0\4\5\1\0\3\5"+
    "\32\0\1\370\43\0\1\5\3\0\6\5\1\371\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\40\0\1\372\35\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\373\4\5\1\0"+
    "\4\5\1\0\3\5\27\0\1\374\46\0\1\5\3\0"+
    "\3\5\1\375\3\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\5\5\1\376\1\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\1\5\1\377\5\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\2\5\1\u0100"+
    "\4\5\1\0\4\5\1\0\3\5\31\0\1\u0101\64\0"+
    "\1\u0102\35\0\1\5\3\0\5\5\1\u0103\1\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\u0104\4\5\1\0\4\5\1\0"+
    "\3\5\27\0\1\u0105\46\0\1\5\3\0\3\5\1\u0106"+
    "\3\5\3\0\7\5\1\0\4\5\1\0\3\5\27\0"+
    "\1\u0107\46\0\1\5\3\0\3\5\1\u0108\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\25\0\1\u0109\50\0"+
    "\1\5\3\0\1\5\1\u010a\5\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\32\0\1\u010b\43\0\1\5\3\0"+
    "\6\5\1\u010c\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\23\0\2\u010d\51\0\1\5\2\0\1\u010d\1\u010e\6\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\7\5\3\0\1\5\1\u010f\5\5\1\0\4\5"+
    "\1\0\3\5\20\0\1\5\3\0\6\5\1\u0110\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\40\0\1\u0111\35\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\u0112\4\5\1\0"+
    "\4\5\1\0\3\5\30\0\1\u0113\54\0\1\u0114\57\0"+
    "\1\u0115\55\0\1\u0116\55\0\1\u0117\47\0\2\u0118\62\0"+
    "\1\u0119\53\0\1\u011a\65\0\1\u011b\47\0\1\u011c\53\0"+
    "\1\u011d\46\0\1\5\3\0\7\5\3\0\4\5\1\u011e"+
    "\2\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\u011f\4\5\1\0\4\5\1\0"+
    "\3\5\30\0\1\u0120\45\0\1\5\3\0\4\5\1\u0121"+
    "\2\5\3\0\7\5\1\0\4\5\1\0\3\5\20\0"+
    "\1\5\3\0\7\5\3\0\1\5\1\u0122\5\5\1\0"+
    "\4\5\1\0\3\5\31\0\1\u0123\44\0\1\5\3\0"+
    "\5\5\1\u0124\1\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\2\0\1\u0125\1\u0126\6\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\3\5\1\u0127\3\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\2\5\1\u0128"+
    "\4\5\1\0\4\5\1\0\3\5\36\0\1\u0129\37\0"+
    "\1\5\3\0\7\5\3\0\1\u012a\6\5\1\0\4\5"+
    "\1\0\3\5\37\0\1\u012b\36\0\1\5\3\0\7\5"+
    "\3\0\1\5\1\u012c\5\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\5\5\1\u012d\1\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\42\0\1\u012e\33\0\1\5"+
    "\3\0\7\5\3\0\4\5\1\u012f\2\5\1\0\4\5"+
    "\1\0\3\5\42\0\1\u0130\33\0\1\5\3\0\7\5"+
    "\3\0\4\5\1\u0131\2\5\1\0\4\5\1\0\3\5"+
    "\20\0\1\5\3\0\7\5\3\0\1\5\1\u0132\5\5"+
    "\1\0\4\5\1\0\3\5\32\0\1\u0133\43\0\1\5"+
    "\3\0\6\5\1\u0134\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\37\0\1\u0135\36\0\1\5\3\0\7\5\3\0"+
    "\1\5\1\u0136\5\5\1\0\4\5\1\0\3\5\26\0"+
    "\1\u0137\47\0\1\5\3\0\2\5\1\u0138\4\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\u0139\4\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\4\5\1\u013a\2\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\23\0\2\u013b\22\0"+
    "\1\u013c\26\0\1\5\2\0\1\u013b\1\u013d\6\5\3\0"+
    "\7\5\1\0\1\5\1\u013e\2\5\1\0\3\5\37\0"+
    "\1\u013f\46\0\1\u0140\50\0\2\u0141\60\0\1\u0142\60\0"+
    "\1\u0143\55\0\1\u0144\53\0\1\u0145\6\0\1\u0146\53\0"+
    "\1\u0147\61\0\1\u0148\46\0\1\u0149\63\0\1\u014a\35\0"+
    "\1\5\3\0\7\5\3\0\1\5\1\u014b\5\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\6\5\1\u014c"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\32\0\1\u014d"+
    "\43\0\1\5\3\0\6\5\1\u014e\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\41\0\1\u014f\34\0\1\5\3\0"+
    "\7\5\3\0\3\5\1\u0150\3\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\6\5\1\u0151"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\1\5\1\u0152\5\5\1\0\4\5\1\0\3\5"+
    "\32\0\1\u0153\43\0\1\5\3\0\6\5\1\u0154\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\55\0\1\u0155\20\0"+
    "\1\5\3\0\7\5\3\0\7\5\1\0\4\5\1\0"+
    "\2\5\1\u0156\20\0\1\5\3\0\3\5\1\u0157\3\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\32\0\1\u0158"+
    "\43\0\1\5\3\0\6\5\1\u0159\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\32\0\1\u015a\43\0\1\5\3\0"+
    "\6\5\1\u015b\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\30\0\1\u015c\45\0\1\5\3\0\4\5\1\u015d\2\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\42\0\1\u015e"+
    "\33\0\1\5\3\0\7\5\3\0\4\5\1\u015f\2\5"+
    "\1\0\4\5\1\0\3\5\32\0\1\u0160\43\0\1\5"+
    "\3\0\6\5\1\u0161\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\7\5\3\0\3\5\1\u0162"+
    "\3\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\1\5\1\u0163\5\5\1\0\4\5\1\0"+
    "\3\5\40\0\1\u0164\40\0\2\u0165\51\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\u0166\4\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\2\0\1\u0165\1\u0167\6\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\26\0\1\u0168\60\0"+
    "\1\u0169\51\0\1\u016a\65\0\1\u016b\60\0\1\u016c\45\0"+
    "\1\u016d\54\0\1\u016e\66\0\1\u016f\46\0\1\u0170\66\0"+
    "\1\u0171\50\0\1\u0172\40\0\1\5\3\0\4\5\1\u0173"+
    "\2\5\3\0\7\5\1\0\4\5\1\0\3\5\27\0"+
    "\1\u0174\46\0\1\5\3\0\3\5\1\u0175\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\7\5\3\0\4\5\1\u0176\2\5\1\0\4\5\1\0"+
    "\3\5\32\0\1\u0177\43\0\1\5\3\0\6\5\1\u0178"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\31\0\1\u0179"+
    "\44\0\1\5\3\0\5\5\1\u017a\1\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\30\0\1\u017b\45\0\1\5"+
    "\3\0\4\5\1\u017c\2\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\23\0\2\u017d\51\0\1\5\2\0\1\u017d"+
    "\1\u017e\6\5\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\44\0\1\u017f\31\0\1\5\3\0\7\5\3\0\6\5"+
    "\1\u0180\1\0\4\5\1\0\3\5\20\0\1\5\2\0"+
    "\1\u0181\1\u0182\6\5\3\0\7\5\1\0\4\5\1\0"+
    "\3\5\20\0\1\5\3\0\6\5\1\u0183\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\23\0\2\u0184\71\0\1\u0185"+
    "\35\0\1\5\2\0\1\u0184\1\u0186\6\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\20\0\1\5\3\0\7\5"+
    "\3\0\2\5\1\u0187\4\5\1\0\4\5\1\0\3\5"+
    "\30\0\1\u0188\57\0\1\u0189\62\0\1\u018a\50\0\1\u018b"+
    "\60\0\1\u018c\64\0\1\u018d\50\0\1\u018e\45\0\1\u018f"+
    "\60\0\1\u0190\43\0\1\5\3\0\3\5\1\u0191\3\5"+
    "\3\0\7\5\1\0\4\5\1\0\3\5\20\0\1\5"+
    "\3\0\3\5\1\u0192\3\5\3\0\7\5\1\0\4\5"+
    "\1\0\3\5\51\0\1\u0193\24\0\1\5\3\0\7\5"+
    "\3\0\7\5\1\0\3\5\1\u0194\1\0\3\5\27\0"+
    "\1\u0195\46\0\1\5\3\0\3\5\1\u0196\3\5\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\23\0\2\u0197\51\0"+
    "\1\5\2\0\1\u0197\1\u0198\6\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\32\0\1\u0199\43\0\1\5\3\0"+
    "\6\5\1\u019a\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\32\0\1\u019b\43\0\1\5\3\0\6\5\1\u019c\3\0"+
    "\7\5\1\0\4\5\1\0\3\5\41\0\1\u019d\46\0"+
    "\1\u019e\43\0\1\5\3\0\7\5\3\0\3\5\1\u019f"+
    "\3\5\1\0\4\5\1\0\3\5\20\0\1\5\3\0"+
    "\6\5\1\u01a0\3\0\7\5\1\0\4\5\1\0\3\5"+
    "\27\0\1\u01a1\56\0\1\u01a2\67\0\1\u01a3\50\0\1\u01a4"+
    "\55\0\1\u01a5\62\0\1\u01a6\50\0\1\u01a7\51\0\1\u01a8"+
    "\44\0\1\5\3\0\4\5\1\u01a9\2\5\3\0\7\5"+
    "\1\0\4\5\1\0\3\5\44\0\1\u01aa\31\0\1\5"+
    "\3\0\7\5\3\0\6\5\1\u01ab\1\0\4\5\1\0"+
    "\3\5\45\0\2\u01ac\27\0\1\5\3\0\7\5\3\0"+
    "\7\5\1\u01ac\1\u01ad\3\5\1\0\3\5\32\0\1\u01ae"+
    "\43\0\1\5\3\0\6\5\1\u01af\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\23\0\2\u01b0\75\0\1\u01b1\31\0"+
    "\1\5\2\0\1\u01b0\1\u01b2\6\5\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\20\0\1\5\3\0\7\5\3\0"+
    "\6\5\1\u01b3\1\0\4\5\1\0\3\5\42\0\1\u01b4"+
    "\50\0\1\u01b5\43\0\2\u01b6\60\0\1\u01b7\55\0\1\u01b8"+
    "\65\0\1\u01b9\36\0\1\5\3\0\7\5\3\0\1\5"+
    "\1\u01ba\5\5\1\0\4\5\1\0\3\5\32\0\1\u01bb"+
    "\43\0\1\5\3\0\6\5\1\u01bc\3\0\7\5\1\0"+
    "\4\5\1\0\3\5\50\0\1\u01bd\37\0\1\u01be\53\0"+
    "\1\u01bf\72\0\2\u01c0\53\0\1\u01c1\31\0\1\5\3\0"+
    "\7\5\3\0\6\5\1\u01c2\1\0\4\5\1\0\3\5"+
    "\41\0\1\u01c3\51\0\1\u01c4\55\0\1\u01c5\55\0\1\u01c6"+
    "\61\0\1\u01c7\37\0\2\u01c8\60\0\1\u01c9\66\0\1\u01ca"+
    "\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16974];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\15\1\13\11\1\1\2\11"+
    "\2\1\1\0\1\11\2\1\1\0\6\1\1\0\7\1"+
    "\2\0\12\1\1\0\1\1\1\0\5\1\3\11\2\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\7\1\12\0\13\1\1\0\2\1\1\0\1\1\1\0"+
    "\5\1\2\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\11\3\1\1\0\3\1\13\0"+
    "\3\1\1\0\6\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\13\0\1\11\3\1\1\0\2\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\4\1\1\0\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\5\1\13\0\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\3\1\2\0"+
    "\2\1\10\0\1\11\3\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\3\1\2\0"+
    "\2\1\3\0\1\11\6\0\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\2\1\2\0\2\1\4\0\1\11"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\2\0\2\1\3\0\2\11"+
    "\1\0\1\11\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\0\1\11\3\0"+
    "\1\11\1\1\1\0\1\1\4\0\1\11\1\1\1\0"+
    "\3\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 230) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
            } 
            // fall through
          case 76: break;
          case 2: 
            { return new Symbol(sym.letter,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 77: break;
          case 3: 
            { return new Symbol(sym.nro,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 78: break;
          case 4: 
            { return new Symbol(sym.abi,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 79: break;
          case 5: 
            { return new Symbol(sym.cer,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 80: break;
          case 6: 
            { return new Symbol(sym.posX,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 81: break;
          case 7: 
            { return new Symbol(sym.HEXA,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 82: break;
          case 8: 
            { return new Symbol(sym.posY,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 83: break;
          case 9: 
            { return new Symbol(sym.gion,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 84: break;
          case 10: 
            { return new Symbol(sym.coma,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 85: break;
          case 11: 
            { return new Symbol(sym.plus,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 86: break;
          case 12: 
            { return new Symbol(sym.por,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 87: break;
          case 13: 
            { return new Symbol(sym.parA,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 88: break;
          case 14: 
            { return new Symbol(sym.parC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 89: break;
          case 15: 
            { return new Symbol(sym.apos,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 90: break;
          case 16: 
            { return new Symbol(sym.keyO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 91: break;
          case 17: 
            { return new Symbol(sym.keyC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 92: break;
          case 18: 
            { return new Symbol(sym.equal,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 93: break;
          case 19: 
            { yychar=0;
            } 
            // fall through
          case 94: break;
          case 20: 
            { 
            } 
            // fall through
          case 95: break;
          case 21: 
            { yybegin(YYINITIAL); yychar=0; System.out.println("simplecoment");
            } 
            // fall through
          case 96: break;
          case 22: 
            { return new Symbol(sym.id,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 97: break;
          case 23: 
            { yybegin(COMENTARIO);
            } 
            // fall through
          case 98: break;
          case 24: 
            { yybegin(COMENTARIODOUBLE);
            } 
            // fall through
          case 99: break;
          case 25: 
            { yybegin(YYINITIAL); yychar=0; System.out.println("multiblecoment");
            } 
            // fall through
          case 100: break;
          case 26: 
            { return new Symbol(sym.tam,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 101: break;
          case 27: 
            { return new Symbol(sym.path,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 102: break;
          case 28: 
            { return new Symbol(sym.tipo,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 103: break;
          case 29: 
            { return new Symbol(sym.high,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 104: break;
          case 30: 
            { return new Symbol(sym.dataO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 105: break;
          case 31: 
            { return new Symbol(sym.txtO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 106: break;
          case 32: 
            { return new Symbol(sym.width,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 107: break;
          case 33: 
            { return new Symbol(sym.video,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 108: break;
          case 34: 
            { return new Symbol(sym.color,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 109: break;
          case 35: 
            { return new Symbol(sym.falso,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 110: break;
          case 36: 
            { return new Symbol(sym.border,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 111: break;
          case 37: 
            { return new Symbol(sym.buttO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 112: break;
          case 38: 
            { return new Symbol(sym.img,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 113: break;
          case 39: 
            { return new Symbol(sym.mini,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 114: break;
          case 40: 
            { return new Symbol(sym.max,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 115: break;
          case 41: 
            { return new Symbol(sym.musica,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 116: break;
          case 42: 
            { return new Symbol(sym.act,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 117: break;
          case 43: 
            { return new Symbol(sym.sendO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 118: break;
          case 44: 
            { return new Symbol(sym.nome,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 119: break;
          case 45: 
            { return new Symbol(sym.font,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 120: break;
          case 46: 
            { return new Symbol(sym.dataC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 121: break;
          case 47: 
            { return new Symbol(sym.winO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 122: break;
          case 48: 
            { return new Symbol(sym.bold,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 123: break;
          case 49: 
            { return new Symbol(sym.ctrlO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 124: break;
          case 50: 
            { return new Symbol(sym.italic,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 125: break;
          case 51: 
            { return new Symbol(sym.defO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 126: break;
          case 52: 
            { return new Symbol(sym.impO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 127: break;
          case 53: 
            { return new Symbol(sym.txtC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 128: break;
          case 54: 
            { return new Symbol(sym.buttC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 129: break;
          case 55: 
            { return new Symbol(sym.numeric,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 130: break;
          case 56: 
            { return new Symbol(sym.first,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 131: break;
          case 57: 
            { return new Symbol(sym.txtarea,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 132: break;
          case 58: 
            { return new Symbol(sym.sendC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 133: break;
          case 59: 
            { return new Symbol(sym.verdad,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 134: break;
          case 60: 
            { return new Symbol(sym.multO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 135: break;
          case 61: 
            { return new Symbol(sym.refe,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 136: break;
          case 62: 
            { return new Symbol(sym.winC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 137: break;
          case 63: 
            { return new Symbol(sym.ctrlC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 138: break;
          case 64: 
            { return new Symbol(sym.defC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 139: break;
          case 65: 
            { return new Symbol(sym.contaiO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 140: break;
          case 66: 
            { return new Symbol(sym.listO,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 141: break;
          case 67: 
            { return new Symbol(sym.second,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 142: break;
          case 68: 
            { return new Symbol(sym.Aend,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 143: break;
          case 69: 
            { return new Symbol(sym.impC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 144: break;
          case 70: 
            { return new Symbol(sym.desp,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 145: break;
          case 71: 
            { return new Symbol(sym.Ainit,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 146: break;
          case 72: 
            { return new Symbol(sym.multC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 147: break;
          case 73: 
            { return new Symbol(sym.contaiC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 148: break;
          case 74: 
            { return new Symbol(sym.listC,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 149: break;
          case 75: 
            { return new Symbol(sym.autoplay,yyline,yychar,new String(yytext()));
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
