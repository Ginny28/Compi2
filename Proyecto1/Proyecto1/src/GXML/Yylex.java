/* The following code was generated by JFlex 1.7.0 */

package GXML;

import java.lang.System;



class Yytoken {
  Yytoken () {}
}


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lex.jlex</tt>
 */
public class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENTARIO = 2;
  public static final int COMENTARIODOUBLE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\51\1\56\1\56\1\55\22\0\1\52\1\0\1\44"+
    "\1\53\1\54\2\0\1\50\1\42\1\43\1\41\1\40\1\37\1\36"+
    "\1\0\1\15\1\3\11\2\2\0\1\14\1\47\1\16\2\0\1\13"+
    "\1\32\1\22\1\23\1\20\1\30\1\35\1\34\1\5\2\1\1\25"+
    "\1\6\1\21\1\10\1\7\1\1\1\11\1\27\1\12\1\31\1\17"+
    "\1\1\1\24\1\33\7\1\1\13\1\32\1\22\1\23\1\20\1\30"+
    "\1\35\1\34\1\5\2\1\1\25\1\6\1\21\1\10\1\7\1\1"+
    "\1\11\1\27\1\12\1\31\1\17\1\1\1\24\1\33\1\1\1\45"+
    "\1\0\1\46\7\0\1\56\252\0\2\4\115\0\1\26\u1ea8\0\1\56"+
    "\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\1\6\2\1\4\1\5"+
    "\5\2\1\6\1\2\1\1\3\2\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\1\1\24\1\25\2\24\1\0"+
    "\1\26\1\2\1\26\1\0\6\2\1\0\7\2\2\0"+
    "\12\2\1\0\1\2\1\0\4\2\1\27\1\30\1\31"+
    "\2\0\2\2\1\0\3\2\1\0\1\2\1\0\3\2"+
    "\1\0\1\2\1\32\5\2\12\0\13\2\1\0\2\2"+
    "\1\0\1\2\1\0\5\2\2\0\2\2\1\0\1\2"+
    "\1\0\2\2\1\0\1\2\1\0\1\2\1\33\1\2"+
    "\2\34\2\2\1\0\1\2\1\35\1\2\13\0\3\2"+
    "\1\0\6\2\1\0\1\2\1\36\1\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\4\2\2\0\2\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\2\2\1\37\1\40\1\0\1\2\13\0\2\41\2\2"+
    "\1\0\2\2\1\0\4\2\1\42\1\0\1\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\2\43\1\2\1\44"+
    "\1\45\1\0\1\46\1\2\1\46\2\47\2\50\1\0"+
    "\1\2\2\51\1\0\3\2\2\52\13\0\2\2\2\53"+
    "\1\54\1\0\1\2\1\0\3\2\1\0\1\2\1\0"+
    "\2\2\1\0\1\2\1\0\1\2\1\55\1\0\1\2"+
    "\1\0\1\2\1\0\3\2\2\0\2\2\10\0\1\56"+
    "\3\0\1\2\1\57\2\60\1\0\1\2\1\61\1\2"+
    "\2\62\1\0\1\2\1\63\1\0\1\2\1\0\1\2"+
    "\2\64\1\0\1\2\1\0\3\2\2\0\2\2\3\0"+
    "\1\65\6\0\1\66\1\2\2\67\1\2\1\0\1\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\2\70\1\0"+
    "\1\2\1\71\2\0\2\2\4\0\1\72\4\0\1\73"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\2\74"+
    "\2\75\2\0\2\2\3\0\1\76\1\77\1\0\1\100"+
    "\1\0\1\101\1\0\1\2\2\102\2\103\1\0\1\104"+
    "\1\2\1\104\1\0\1\105\3\0\2\106\1\0\1\2"+
    "\4\0\2\107\1\0\1\110\1\111\1\112\3\0\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\215\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\274\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\274\0\215\0\215\0\215\0\215\0\215"+
    "\0\215\0\215\0\215\0\215\0\215\0\215\0\215\0\u0468"+
    "\0\u0497\0\215\0\215\0\u04c6\0\u04f5\0\u0524\0\215\0\u0553"+
    "\0\274\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c"+
    "\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\215\0\215\0\215\0\u0bc0\0\u0bef"+
    "\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\274\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490"+
    "\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\274\0\u17de\0\215\0\274\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\274\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c"+
    "\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1cd3\0\u1d02\0\274\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65"+
    "\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd"+
    "\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\274"+
    "\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e"+
    "\0\u23cd\0\u23fc\0\u242b\0\u245a\0\u2489\0\215\0\274\0\u24b8"+
    "\0\u24e7\0\u2516\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\u265f\0\274\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779"+
    "\0\u27a8\0\u27d7\0\u2806\0\215\0\274\0\u2835\0\274\0\274"+
    "\0\u2864\0\215\0\u2893\0\274\0\215\0\274\0\215\0\274"+
    "\0\u28c2\0\u28f1\0\215\0\274\0\u2920\0\u294f\0\u297e\0\u29ad"+
    "\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25"+
    "\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\215"+
    "\0\274\0\274\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88"+
    "\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00"+
    "\0\u2f2f\0\274\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049"+
    "\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u31c1"+
    "\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\215\0\u330a"+
    "\0\u3339\0\u3368\0\u3397\0\274\0\215\0\274\0\u33c6\0\u33f5"+
    "\0\274\0\u3424\0\215\0\274\0\u3453\0\u3482\0\274\0\u34b1"+
    "\0\u34e0\0\u350f\0\u353e\0\215\0\274\0\u356d\0\u359c\0\u35cb"+
    "\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743"+
    "\0\u3772\0\u37a1\0\215\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c"+
    "\0\u38bb\0\215\0\u38ea\0\215\0\274\0\u3919\0\u3948\0\u3977"+
    "\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91\0\215\0\274"+
    "\0\u3ac0\0\u3aef\0\274\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda"+
    "\0\u3c09\0\u3c38\0\u3c67\0\215\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23"+
    "\0\274\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c"+
    "\0\215\0\274\0\215\0\274\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28"+
    "\0\u3f57\0\u3f86\0\u3fb5\0\215\0\215\0\u3fe4\0\215\0\u4013"+
    "\0\274\0\u4042\0\u4071\0\215\0\274\0\215\0\274\0\u40a0"+
    "\0\215\0\u40cf\0\274\0\u40fe\0\215\0\u412d\0\u415c\0\u418b"+
    "\0\215\0\274\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276\0\u42a5"+
    "\0\215\0\274\0\u42d4\0\215\0\215\0\215\0\u4303\0\u4332"+
    "\0\u4361\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\5\1\13\1\14\1\15\1\16\1\4\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\5\1\32\1\33\2\5\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\4\1\50\1\0\51\52\1\53"+
    "\46\52\1\4\7\52\1\54\2\52\1\55\1\54\1\52"+
    "\60\0\1\5\3\0\7\5\3\0\7\5\1\0\7\5"+
    "\23\0\2\6\61\0\1\56\14\0\1\57\34\0\1\5"+
    "\3\0\1\5\1\60\5\5\3\0\4\5\1\61\2\5"+
    "\1\0\7\5\22\0\1\5\2\0\1\62\1\63\5\5"+
    "\1\64\3\0\7\5\1\0\2\5\1\65\4\5\22\0"+
    "\1\5\3\0\4\5\1\66\1\5\1\67\3\0\7\5"+
    "\1\0\7\5\22\0\1\5\3\0\7\5\3\0\1\5"+
    "\1\70\5\5\1\0\7\5\22\0\1\5\2\0\1\71"+
    "\1\72\5\5\1\73\3\0\1\5\1\74\5\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\2\5\1\75"+
    "\1\76\2\5\1\77\1\0\2\5\1\100\4\5\36\0"+
    "\1\101\42\0\1\5\2\0\1\102\1\103\6\5\3\0"+
    "\1\5\1\104\5\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\105\4\5\1\0\7\5\22\0"+
    "\1\5\3\0\3\5\1\106\3\5\3\0\1\5\1\107"+
    "\5\5\1\0\2\5\1\110\4\5\22\0\1\5\3\0"+
    "\3\5\1\111\3\5\3\0\7\5\1\0\2\5\1\112"+
    "\4\5\22\0\1\5\3\0\6\5\1\113\3\0\1\5"+
    "\1\114\5\5\1\0\7\5\22\0\1\5\2\0\1\115"+
    "\1\116\6\5\3\0\7\5\1\0\7\5\41\0\1\117"+
    "\37\0\1\5\3\0\7\5\3\0\1\5\1\120\5\5"+
    "\1\0\7\5\22\0\1\5\3\0\6\5\1\121\3\0"+
    "\7\5\1\0\2\5\1\122\4\5\22\0\1\5\3\0"+
    "\3\5\1\123\3\5\3\0\7\5\1\0\7\5\73\0"+
    "\1\50\2\0\1\50\54\0\1\124\1\125\53\0\1\54"+
    "\3\0\1\54\54\0\1\126\12\0\1\127\3\0\1\130"+
    "\44\0\1\5\3\0\2\5\1\131\3\5\1\132\3\0"+
    "\7\5\1\0\7\5\42\0\1\133\36\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\134\4\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\5\5\1\135\1\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\6\5\1\136"+
    "\1\137\1\140\6\5\22\0\1\5\2\0\1\141\1\142"+
    "\6\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\5\5\1\143\1\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\7\5\1\0\1\5\1\144"+
    "\5\5\30\0\1\145\50\0\1\5\3\0\2\5\1\146"+
    "\4\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\1\5\1\147\5\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\5\5\1\150\1\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\3\5\1\151"+
    "\3\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\3\5\1\152\3\5\1\0\7\5\22\0\1\5\3\0"+
    "\5\5\1\153\1\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\5\5\1\154\1\5\3\0\7\5\1\0"+
    "\7\5\25\0\2\155\1\156\3\0\1\157\4\0\1\160"+
    "\1\161\1\0\1\162\1\163\1\0\1\164\4\0\1\165"+
    "\47\0\1\166\34\0\1\5\3\0\7\5\3\0\4\5"+
    "\1\167\2\5\1\0\7\5\22\0\1\5\3\0\4\5"+
    "\1\170\2\5\3\0\2\5\1\171\4\5\1\0\7\5"+
    "\22\0\1\5\3\0\7\5\3\0\1\172\6\5\1\0"+
    "\7\5\22\0\1\5\3\0\1\5\1\173\5\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\7\5\1\0\6\5\1\174\22\0\1\5\3\0\1\5"+
    "\1\175\5\5\3\0\7\5\1\0\7\5\22\0\1\5"+
    "\3\0\7\5\3\0\2\5\1\176\3\5\1\177\1\0"+
    "\7\5\22\0\1\5\3\0\4\5\1\200\2\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\5\5\1\201"+
    "\1\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\202\1\203\1\204\5\5\47\0"+
    "\2\205\30\0\1\5\3\0\7\5\3\0\7\5\1\205"+
    "\1\206\6\5\43\0\1\207\35\0\1\5\3\0\7\5"+
    "\3\0\3\5\1\210\3\5\1\0\7\5\22\0\1\5"+
    "\3\0\7\5\3\0\6\5\1\211\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\1\5\1\212\5\5\1\0"+
    "\7\5\22\0\1\5\3\0\4\5\1\213\1\214\1\5"+
    "\3\0\7\5\1\0\7\5\31\0\1\215\103\0\1\216"+
    "\22\0\1\5\3\0\3\5\1\217\3\5\3\0\7\5"+
    "\1\0\7\5\22\0\1\5\3\0\7\5\3\0\7\5"+
    "\1\0\6\5\1\220\25\0\2\221\52\0\1\5\2\0"+
    "\1\221\1\222\6\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\2\0\1\223\1\224\6\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\5\5\1\225\1\5\3\0"+
    "\7\5\1\0\7\5\25\0\2\226\52\0\1\5\2\0"+
    "\1\226\1\227\6\5\3\0\7\5\1\0\7\5\42\0"+
    "\1\230\36\0\1\5\3\0\7\5\3\0\2\5\1\231"+
    "\4\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\7\5\1\0\5\5\1\232\1\5\22\0\1\5\3\0"+
    "\7\5\3\0\1\5\1\233\5\5\1\0\7\5\31\0"+
    "\1\234\47\0\1\5\3\0\3\5\1\235\3\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\5\5\1\236"+
    "\1\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\0\5\5\1\237\1\5\22\0"+
    "\1\5\2\0\1\240\1\241\6\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\3\5\1\242\3\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\3\5\1\243"+
    "\3\5\3\0\7\5\1\0\7\5\27\0\1\244\101\0"+
    "\1\245\45\0\1\246\56\0\1\247\57\0\1\250\45\0"+
    "\1\251\61\0\1\252\4\0\1\253\42\0\2\254\61\0"+
    "\1\255\66\0\1\256\37\0\1\5\3\0\7\5\3\0"+
    "\1\5\1\257\5\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\4\5\1\260\2\5\1\0\7\5\22\0"+
    "\1\5\3\0\5\5\1\261\1\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\2\0\1\262\1\263\6\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\7\5\1\0\3\5\1\264\3\5\22\0\1\5\3\0"+
    "\4\5\1\265\2\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\1\5\1\266\5\5\1\0"+
    "\7\5\22\0\1\5\3\0\5\5\1\267\1\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\3\5\1\270"+
    "\3\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\271\1\272\6\5\22\0\1\5"+
    "\3\0\3\5\1\273\3\5\3\0\7\5\1\0\7\5"+
    "\30\0\1\274\50\0\1\5\3\0\2\5\1\275\4\5"+
    "\3\0\7\5\1\0\7\5\22\0\1\5\3\0\7\5"+
    "\3\0\1\5\1\276\5\5\1\0\7\5\33\0\1\277"+
    "\45\0\1\5\3\0\5\5\1\300\1\5\3\0\7\5"+
    "\1\0\7\5\52\0\1\301\26\0\1\5\3\0\7\5"+
    "\3\0\7\5\1\0\2\5\1\302\4\5\22\0\1\5"+
    "\3\0\7\5\3\0\7\5\1\303\1\304\6\5\22\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\305\4\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\4\5\1\306"+
    "\2\5\1\0\7\5\22\0\1\5\3\0\3\5\1\307"+
    "\3\5\3\0\7\5\1\0\7\5\32\0\1\310\65\0"+
    "\1\311\37\0\1\5\3\0\4\5\1\312\2\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\1\5\1\313\5\5\1\0\7\5\27\0\1\314\51\0"+
    "\1\5\3\0\1\5\1\315\5\5\3\0\7\5\1\0"+
    "\7\5\27\0\1\316\51\0\1\5\3\0\1\5\1\317"+
    "\5\5\3\0\7\5\1\0\7\5\22\0\1\5\2\0"+
    "\1\320\1\321\6\5\3\0\7\5\1\0\7\5\43\0"+
    "\1\322\35\0\1\5\3\0\7\5\3\0\3\5\1\323"+
    "\3\5\1\0\7\5\43\0\1\324\35\0\1\5\3\0"+
    "\7\5\3\0\3\5\1\325\3\5\1\0\7\5\22\0"+
    "\1\5\3\0\4\5\1\326\2\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\3\5\1\327\3\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\3\5\1\330"+
    "\3\5\3\0\7\5\1\0\7\5\31\0\1\331\47\0"+
    "\1\5\3\0\3\5\1\332\3\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\7\5\1\0"+
    "\7\5\1\333\27\0\1\334\74\0\1\335\55\0\1\336"+
    "\53\0\1\337\54\0\1\340\60\0\1\341\47\0\1\342"+
    "\74\0\1\343\54\0\2\344\41\0\1\345\54\0\1\346"+
    "\47\0\1\5\3\0\3\5\1\347\3\5\3\0\7\5"+
    "\1\0\7\5\22\0\1\5\3\0\6\5\1\350\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\6\5\1\351"+
    "\3\0\7\5\1\0\7\5\34\0\1\352\44\0\1\5"+
    "\3\0\6\5\1\353\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\4\5\1\354\2\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\2\0\1\355\1\356\6\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\4\5\1\357"+
    "\2\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\4\5\1\360\2\5\3\0\1\5\1\361\5\5\1\0"+
    "\7\5\22\0\1\5\3\0\4\5\1\362\2\5\3\0"+
    "\7\5\1\0\7\5\25\0\2\363\52\0\1\5\2\0"+
    "\1\363\1\364\6\5\3\0\7\5\1\0\7\5\46\0"+
    "\1\365\32\0\1\5\3\0\7\5\3\0\6\5\1\366"+
    "\1\0\7\5\22\0\1\5\3\0\7\5\3\0\3\5"+
    "\1\367\3\5\1\0\7\5\34\0\1\370\44\0\1\5"+
    "\3\0\6\5\1\371\3\0\7\5\1\0\7\5\42\0"+
    "\1\372\36\0\1\5\3\0\7\5\3\0\2\5\1\373"+
    "\4\5\1\0\7\5\31\0\1\374\47\0\1\5\3\0"+
    "\3\5\1\375\3\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\5\5\1\376\1\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\1\5\1\377"+
    "\5\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\2\5\1\u0100\4\5\1\0\7\5\33\0\1\u0101\65\0"+
    "\1\u0102\36\0\1\5\3\0\5\5\1\u0103\1\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\2\5\1\u0104\4\5\1\0\7\5\31\0\1\u0105\47\0"+
    "\1\5\3\0\3\5\1\u0106\3\5\3\0\7\5\1\0"+
    "\7\5\31\0\1\u0107\47\0\1\5\3\0\3\5\1\u0108"+
    "\3\5\3\0\7\5\1\0\7\5\27\0\1\u0109\51\0"+
    "\1\5\3\0\1\5\1\u010a\5\5\3\0\7\5\1\0"+
    "\7\5\34\0\1\u010b\44\0\1\5\3\0\6\5\1\u010c"+
    "\3\0\7\5\1\0\7\5\25\0\2\u010d\52\0\1\5"+
    "\2\0\1\u010d\1\u010e\6\5\3\0\7\5\1\0\7\5"+
    "\22\0\1\5\3\0\7\5\3\0\1\5\1\u010f\5\5"+
    "\1\0\7\5\22\0\1\5\3\0\6\5\1\u0110\3\0"+
    "\7\5\1\0\7\5\42\0\1\u0111\36\0\1\5\3\0"+
    "\7\5\3\0\2\5\1\u0112\4\5\1\0\7\5\32\0"+
    "\1\u0113\55\0\1\u0114\60\0\1\u0115\56\0\1\u0116\56\0"+
    "\1\u0117\50\0\2\u0118\63\0\1\u0119\54\0\1\u011a\66\0"+
    "\1\u011b\50\0\1\u011c\54\0\1\u011d\47\0\1\5\3\0"+
    "\7\5\3\0\4\5\1\u011e\2\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\u011f\4\5\1\0"+
    "\7\5\32\0\1\u0120\46\0\1\5\3\0\4\5\1\u0121"+
    "\2\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\1\5\1\u0122\5\5\1\0\7\5\33\0"+
    "\1\u0123\45\0\1\5\3\0\5\5\1\u0124\1\5\3\0"+
    "\7\5\1\0\7\5\22\0\1\5\2\0\1\u0125\1\u0126"+
    "\6\5\3\0\7\5\1\0\7\5\22\0\1\5\3\0"+
    "\3\5\1\u0127\3\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\u0128\4\5\1\0"+
    "\7\5\40\0\1\u0129\40\0\1\5\3\0\7\5\3\0"+
    "\1\u012a\6\5\1\0\7\5\41\0\1\u012b\37\0\1\5"+
    "\3\0\7\5\3\0\1\5\1\u012c\5\5\1\0\7\5"+
    "\22\0\1\5\3\0\5\5\1\u012d\1\5\3\0\7\5"+
    "\1\0\7\5\44\0\1\u012e\34\0\1\5\3\0\7\5"+
    "\3\0\4\5\1\u012f\2\5\1\0\7\5\44\0\1\u0130"+
    "\34\0\1\5\3\0\7\5\3\0\4\5\1\u0131\2\5"+
    "\1\0\7\5\22\0\1\5\3\0\7\5\3\0\1\5"+
    "\1\u0132\5\5\1\0\7\5\34\0\1\u0133\44\0\1\5"+
    "\3\0\6\5\1\u0134\3\0\7\5\1\0\7\5\41\0"+
    "\1\u0135\37\0\1\5\3\0\7\5\3\0\1\5\1\u0136"+
    "\5\5\1\0\7\5\30\0\1\u0137\50\0\1\5\3\0"+
    "\2\5\1\u0138\4\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\7\5\3\0\2\5\1\u0139\4\5\1\0"+
    "\7\5\22\0\1\5\3\0\4\5\1\u013a\2\5\3\0"+
    "\7\5\1\0\7\5\25\0\2\u013b\22\0\1\u013c\27\0"+
    "\1\5\2\0\1\u013b\1\u013d\6\5\3\0\7\5\1\0"+
    "\1\5\1\u013e\5\5\41\0\1\u013f\47\0\1\u0140\51\0"+
    "\2\u0141\61\0\1\u0142\61\0\1\u0143\56\0\1\u0144\54\0"+
    "\1\u0145\6\0\1\u0146\54\0\1\u0147\62\0\1\u0148\47\0"+
    "\1\u0149\64\0\1\u014a\36\0\1\5\3\0\7\5\3\0"+
    "\1\5\1\u014b\5\5\1\0\7\5\22\0\1\5\3\0"+
    "\6\5\1\u014c\3\0\7\5\1\0\7\5\34\0\1\u014d"+
    "\44\0\1\5\3\0\6\5\1\u014e\3\0\7\5\1\0"+
    "\7\5\43\0\1\u014f\35\0\1\5\3\0\7\5\3\0"+
    "\3\5\1\u0150\3\5\1\0\7\5\22\0\1\5\3\0"+
    "\7\5\3\0\6\5\1\u0151\1\0\7\5\22\0\1\5"+
    "\3\0\7\5\3\0\1\5\1\u0152\5\5\1\0\7\5"+
    "\34\0\1\u0153\44\0\1\5\3\0\6\5\1\u0154\3\0"+
    "\7\5\1\0\7\5\56\0\1\u0155\22\0\1\5\3\0"+
    "\7\5\3\0\7\5\1\0\6\5\1\u0156\22\0\1\5"+
    "\3\0\3\5\1\u0157\3\5\3\0\7\5\1\0\7\5"+
    "\34\0\1\u0158\44\0\1\5\3\0\6\5\1\u0159\3\0"+
    "\7\5\1\0\7\5\34\0\1\u015a\44\0\1\5\3\0"+
    "\6\5\1\u015b\3\0\7\5\1\0\7\5\32\0\1\u015c"+
    "\46\0\1\5\3\0\4\5\1\u015d\2\5\3\0\7\5"+
    "\1\0\7\5\44\0\1\u015e\34\0\1\5\3\0\7\5"+
    "\3\0\4\5\1\u015f\2\5\1\0\7\5\34\0\1\u0160"+
    "\44\0\1\5\3\0\6\5\1\u0161\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\3\5\1\u0162"+
    "\3\5\1\0\7\5\22\0\1\5\3\0\7\5\3\0"+
    "\1\5\1\u0163\5\5\1\0\7\5\42\0\1\u0164\41\0"+
    "\2\u0165\52\0\1\5\3\0\7\5\3\0\2\5\1\u0166"+
    "\4\5\1\0\7\5\22\0\1\5\2\0\1\u0165\1\u0167"+
    "\6\5\3\0\7\5\1\0\7\5\30\0\1\u0168\61\0"+
    "\1\u0169\52\0\1\u016a\66\0\1\u016b\61\0\1\u016c\46\0"+
    "\1\u016d\55\0\1\u016e\67\0\1\u016f\47\0\1\u0170\67\0"+
    "\1\u0171\51\0\1\u0172\41\0\1\5\3\0\4\5\1\u0173"+
    "\2\5\3\0\7\5\1\0\7\5\31\0\1\u0174\47\0"+
    "\1\5\3\0\3\5\1\u0175\3\5\3\0\7\5\1\0"+
    "\7\5\22\0\1\5\3\0\7\5\3\0\4\5\1\u0176"+
    "\2\5\1\0\7\5\34\0\1\u0177\44\0\1\5\3\0"+
    "\6\5\1\u0178\3\0\7\5\1\0\7\5\33\0\1\u0179"+
    "\45\0\1\5\3\0\5\5\1\u017a\1\5\3\0\7\5"+
    "\1\0\7\5\32\0\1\u017b\46\0\1\5\3\0\4\5"+
    "\1\u017c\2\5\3\0\7\5\1\0\7\5\25\0\2\u017d"+
    "\52\0\1\5\2\0\1\u017d\1\u017e\6\5\3\0\7\5"+
    "\1\0\7\5\46\0\1\u017f\32\0\1\5\3\0\7\5"+
    "\3\0\6\5\1\u0180\1\0\7\5\22\0\1\5\2\0"+
    "\1\u0181\1\u0182\6\5\3\0\7\5\1\0\7\5\22\0"+
    "\1\5\3\0\6\5\1\u0183\3\0\7\5\1\0\7\5"+
    "\25\0\2\u0184\72\0\1\u0185\36\0\1\5\2\0\1\u0184"+
    "\1\u0186\6\5\3\0\7\5\1\0\7\5\22\0\1\5"+
    "\3\0\7\5\3\0\2\5\1\u0187\4\5\1\0\7\5"+
    "\32\0\1\u0188\60\0\1\u0189\63\0\1\u018a\51\0\1\u018b"+
    "\61\0\1\u018c\65\0\1\u018d\51\0\1\u018e\46\0\1\u018f"+
    "\61\0\1\u0190\44\0\1\5\3\0\3\5\1\u0191\3\5"+
    "\3\0\7\5\1\0\7\5\22\0\1\5\3\0\3\5"+
    "\1\u0192\3\5\3\0\7\5\1\0\7\5\53\0\1\u0193"+
    "\25\0\1\5\3\0\7\5\3\0\7\5\1\0\3\5"+
    "\1\u0194\3\5\31\0\1\u0195\47\0\1\5\3\0\3\5"+
    "\1\u0196\3\5\3\0\7\5\1\0\7\5\25\0\2\u0197"+
    "\52\0\1\5\2\0\1\u0197\1\u0198\6\5\3\0\7\5"+
    "\1\0\7\5\34\0\1\u0199\44\0\1\5\3\0\6\5"+
    "\1\u019a\3\0\7\5\1\0\7\5\34\0\1\u019b\44\0"+
    "\1\5\3\0\6\5\1\u019c\3\0\7\5\1\0\7\5"+
    "\43\0\1\u019d\47\0\1\u019e\44\0\1\5\3\0\7\5"+
    "\3\0\3\5\1\u019f\3\5\1\0\7\5\22\0\1\5"+
    "\3\0\6\5\1\u01a0\3\0\7\5\1\0\7\5\31\0"+
    "\1\u01a1\57\0\1\u01a2\70\0\1\u01a3\51\0\1\u01a4\56\0"+
    "\1\u01a5\63\0\1\u01a6\51\0\1\u01a7\52\0\1\u01a8\45\0"+
    "\1\5\3\0\4\5\1\u01a9\2\5\3\0\7\5\1\0"+
    "\7\5\46\0\1\u01aa\32\0\1\5\3\0\7\5\3\0"+
    "\6\5\1\u01ab\1\0\7\5\47\0\2\u01ac\30\0\1\5"+
    "\3\0\7\5\3\0\7\5\1\u01ac\1\u01ad\6\5\34\0"+
    "\1\u01ae\44\0\1\5\3\0\6\5\1\u01af\3\0\7\5"+
    "\1\0\7\5\25\0\2\u01b0\76\0\1\u01b1\32\0\1\5"+
    "\2\0\1\u01b0\1\u01b2\6\5\3\0\7\5\1\0\7\5"+
    "\22\0\1\5\3\0\7\5\3\0\6\5\1\u01b3\1\0"+
    "\7\5\44\0\1\u01b4\51\0\1\u01b5\44\0\2\u01b6\61\0"+
    "\1\u01b7\56\0\1\u01b8\66\0\1\u01b9\37\0\1\5\3\0"+
    "\7\5\3\0\1\5\1\u01ba\5\5\1\0\7\5\34\0"+
    "\1\u01bb\44\0\1\5\3\0\6\5\1\u01bc\3\0\7\5"+
    "\1\0\7\5\52\0\1\u01bd\40\0\1\u01be\54\0\1\u01bf"+
    "\73\0\2\u01c0\54\0\1\u01c1\32\0\1\5\3\0\7\5"+
    "\3\0\6\5\1\u01c2\1\0\7\5\43\0\1\u01c3\52\0"+
    "\1\u01c4\56\0\1\u01c5\56\0\1\u01c6\62\0\1\u01c7\40\0"+
    "\2\u01c8\61\0\1\u01c9\67\0\1\u01ca\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17296];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\12\1\1\11\14\1\14\11\2\1\2\11"+
    "\2\1\1\0\1\11\2\1\1\0\6\1\1\0\7\1"+
    "\2\0\12\1\1\0\1\1\1\0\4\1\3\11\2\0"+
    "\2\1\1\0\3\1\1\0\1\1\1\0\3\1\1\0"+
    "\7\1\12\0\13\1\1\0\2\1\1\0\1\1\1\0"+
    "\5\1\2\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\11\3\1\1\0\3\1\13\0"+
    "\3\1\1\0\6\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\4\1\2\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\1\1\13\0\1\11\3\1\1\0\2\1"+
    "\1\0\5\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\4\1\1\0\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\0\1\1\1\11\1\1\1\0"+
    "\5\1\13\0\2\1\1\11\2\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\3\1\2\0"+
    "\2\1\10\0\1\11\3\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\11\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\3\1\2\0"+
    "\2\1\3\0\1\11\6\0\1\11\1\1\1\11\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\2\1\2\0\2\1\4\0\1\11"+
    "\4\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\11\1\1\2\0\2\1\3\0\2\11"+
    "\1\0\1\11\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\11\1\1\1\0\1\11\2\1\1\0\1\11\3\0"+
    "\1\11\1\1\1\0\1\1\4\0\1\11\1\1\1\0"+
    "\3\11\3\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[458];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("error lexico en "  + yyline + "," + yychar + " No se reconoce " + yytext());
    yychar=0;
            } 
            // fall through
          case 76: break;
          case 2: 
            { System.out.println("LETRA");
            } 
            // fall through
          case 77: break;
          case 3: 
            { System.out.println("NUMERO");
            } 
            // fall through
          case 78: break;
          case 4: 
            { System.out.println("abi");
            } 
            // fall through
          case 79: break;
          case 5: 
            { System.out.println("cer");
            } 
            // fall through
          case 80: break;
          case 6: 
            { System.out.println("x");
            } 
            // fall through
          case 81: break;
          case 7: 
            { System.out.println("y");
            } 
            // fall through
          case 82: break;
          case 8: 
            { System.out.println("guion");
            } 
            // fall through
          case 83: break;
          case 9: 
            { System.out.println("coma");
            } 
            // fall through
          case 84: break;
          case 10: 
            { System.out.println("plus");
            } 
            // fall through
          case 85: break;
          case 11: 
            { System.out.println("por");
            } 
            // fall through
          case 86: break;
          case 12: 
            { System.out.println("pabi");
            } 
            // fall through
          case 87: break;
          case 13: 
            { System.out.println("pcer");
            } 
            // fall through
          case 88: break;
          case 14: 
            { System.out.println("comi");
            } 
            // fall through
          case 89: break;
          case 15: 
            { System.out.println("{");
            } 
            // fall through
          case 90: break;
          case 16: 
            { System.out.println("}");
            } 
            // fall through
          case 91: break;
          case 17: 
            { System.out.println("EQUAL");
            } 
            // fall through
          case 92: break;
          case 18: 
            { System.out.println("COMILLA");
            } 
            // fall through
          case 93: break;
          case 19: 
            { yychar=0;
            } 
            // fall through
          case 94: break;
          case 20: 
            { 
            } 
            // fall through
          case 95: break;
          case 21: 
            { yybegin(YYINITIAL); yychar=0; System.out.println("simplecoment");
            } 
            // fall through
          case 96: break;
          case 22: 
            { System.out.println("id");
            } 
            // fall through
          case 97: break;
          case 23: 
            { yybegin(COMENTARIO);
            } 
            // fall through
          case 98: break;
          case 24: 
            { yybegin(COMENTARIODOUBLE);
            } 
            // fall through
          case 99: break;
          case 25: 
            { yybegin(YYINITIAL); yychar=0; System.out.println("multiblecoment");
            } 
            // fall through
          case 100: break;
          case 26: 
            { System.out.println("size");
            } 
            // fall through
          case 101: break;
          case 27: 
            { System.out.println("path");
            } 
            // fall through
          case 102: break;
          case 28: 
            { System.out.println("tpo");
            } 
            // fall through
          case 103: break;
          case 29: 
            { System.out.println("high");
            } 
            // fall through
          case 104: break;
          case 30: 
            { System.out.println("da");
            } 
            // fall through
          case 105: break;
          case 31: 
            { System.out.println("txta");
            } 
            // fall through
          case 106: break;
          case 32: 
            { System.out.println("width");
            } 
            // fall through
          case 107: break;
          case 33: 
            { System.out.println("video");
            } 
            // fall through
          case 108: break;
          case 34: 
            { System.out.println("col");
            } 
            // fall through
          case 109: break;
          case 35: 
            { System.out.println("false");
            } 
            // fall through
          case 110: break;
          case 36: 
            { System.out.println("border");
            } 
            // fall through
          case 111: break;
          case 37: 
            { System.out.println("bota");
            } 
            // fall through
          case 112: break;
          case 38: 
            { System.out.println("imagen");
            } 
            // fall through
          case 113: break;
          case 39: 
            { System.out.println("min");
            } 
            // fall through
          case 114: break;
          case 40: 
            { System.out.println("max");
            } 
            // fall through
          case 115: break;
          case 41: 
            { System.out.println("musica");
            } 
            // fall through
          case 116: break;
          case 42: 
            { System.out.println("action");
            } 
            // fall through
          case 117: break;
          case 43: 
            { System.out.println("snda");
            } 
            // fall through
          case 118: break;
          case 44: 
            { System.out.println("name");
            } 
            // fall through
          case 119: break;
          case 45: 
            { System.out.println("font");
            } 
            // fall through
          case 120: break;
          case 46: 
            { System.out.println("dc");
            } 
            // fall through
          case 121: break;
          case 47: 
            { System.out.println("vena");
            } 
            // fall through
          case 122: break;
          case 48: 
            { System.out.println("bold");
            } 
            // fall through
          case 123: break;
          case 49: 
            { System.out.println("ctra");
            } 
            // fall through
          case 124: break;
          case 50: 
            { System.out.println("italic");
            } 
            // fall through
          case 125: break;
          case 51: 
            { System.out.println("defa");
            } 
            // fall through
          case 126: break;
          case 52: 
            { System.out.println("importa");
            } 
            // fall through
          case 127: break;
          case 53: 
            { System.out.println("txtc");
            } 
            // fall through
          case 128: break;
          case 54: 
            { System.out.println("botc");
            } 
            // fall through
          case 129: break;
          case 55: 
            { System.out.println("numer");
            } 
            // fall through
          case 130: break;
          case 56: 
            { System.out.println("prin");
            } 
            // fall through
          case 131: break;
          case 57: 
            { System.out.println("area");
            } 
            // fall through
          case 132: break;
          case 58: 
            { System.out.println("sndc");
            } 
            // fall through
          case 133: break;
          case 59: 
            { System.out.println("true");
            } 
            // fall through
          case 134: break;
          case 60: 
            { System.out.println("mula");
            } 
            // fall through
          case 135: break;
          case 61: 
            { System.out.println("ref");
            } 
            // fall through
          case 136: break;
          case 62: 
            { System.out.println("venc");
            } 
            // fall through
          case 137: break;
          case 63: 
            { System.out.println("ctrc");
            } 
            // fall through
          case 138: break;
          case 64: 
            { System.out.println("defc");
            } 
            // fall through
          case 139: break;
          case 65: 
            { System.out.println("conta");
            } 
            // fall through
          case 140: break;
          case 66: 
            { System.out.println("la");
            } 
            // fall through
          case 141: break;
          case 67: 
            { System.out.println("sec");
            } 
            // fall through
          case 142: break;
          case 68: 
            { System.out.println("fin");
            } 
            // fall through
          case 143: break;
          case 69: 
            { System.out.println("importc");
            } 
            // fall through
          case 144: break;
          case 70: 
            { System.out.println("desp");
            } 
            // fall through
          case 145: break;
          case 71: 
            { System.out.println("init");
            } 
            // fall through
          case 146: break;
          case 72: 
            { System.out.println("mulc");
            } 
            // fall through
          case 147: break;
          case 73: 
            { System.out.println("contc");
            } 
            // fall through
          case 148: break;
          case 74: 
            { System.out.println("lc");
            } 
            // fall through
          case 149: break;
          case 75: 
            { System.out.println("autoplay");
            } 
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
