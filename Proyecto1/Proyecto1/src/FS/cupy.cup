package GXML;

import java_cup.runtime.*;
import java.lang.*;
import java.util.*;
import java.io.*;
import AST.*;

parser code {:

public static void main(String args[]) throws Exception {

// La clase Yylex es creada por el analizador léxico

new parser(new Yylex(new BufferedReader(new InputStreamReader(System.in)))).parse();
}

public void syntax_error(Symbol s){
        System.out.println("Error en la col " + (s.right+1) +" fila "+s.left+ ". Identificador "
+s.value  );
}
public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la Columna " + (s.right+1)+ "fila "+s.left+". Identificador " +
s.value + " no reconocido.");
}
:}

action code {:
ArrayList vars= new ArrayList();
  ArrayList  values = new ArrayList();

:}





/*Terminales de cabecera */

terminal String HEXA,coma,plus,por,gion,parA,parC,abi,cer,apos,keyO,keyC,equal,nro,letter,slash;

//initial
nonterminal lengua,Binit,B,Cuerpo,Atributos,Bcositas,Valor,BcositasR;
nonterminal NodoGXML tag;



// Aquí irá comecar o lenguagem!!

start with lengua;

lengua ::= Binit{:System.out.println("analisis finalizado!");:};



// inicio ventana

Binit::=B;


B::=  abi tag:m Atributos cer Cuerpo abi slash tag:s cer {:System.out.println(m+"--"+s);:}
			|abi tag:m cer Cuerpo abi slash tag:s cer{:System.out.println(m+"--"+s);:}
			|abi tag:m Atributos cer abi slash tag:s cer{:System.out.println(m+"--"+s);:}
		  ;


Cuerpo::= Cuerpo B
          |B
          |BcositasR
          ;

Atributos ::= Atributos Valor:l{:System.out.println();:}
         		  |Valor:l{:System.out.println();:};


Valor ::=    letter:m equal apos BcositasR:s apos {:RESULT = "attr:"+m + " val:"+s; :}
            |letter:m equal keyO BcositasR:s keyC {:RESULT = "attr:"+m + " val:"+s; :}
            |letter:m equal nro:s  {:RESULT = "attr:"+m + "val:"+s; :};

tag ::=  letter:m{:RESULT =m;:};



BcositasR ::= BcositasR:p Bcositas:m{:RESULT = m +"" p;:}
              |Bcositas:m{:RESULT = m;:};

Bcositas ::= letter:x{:RESULT= x;:}
             |nro:x{:RESULT= x;:}
             |HEXA:x{:RESULT= x;:}
             |coma:x{:RESULT= x;:}
             |plus:x{:RESULT= x;:}
             |por:x{:RESULT= x;:}
             |gion:x{:RESULT= x;:}
             |parA:x{:RESULT= x;:}
             |parC:x{:RESULT= x;:};
